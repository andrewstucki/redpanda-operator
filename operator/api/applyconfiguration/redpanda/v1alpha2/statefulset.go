// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	redpandav1alpha2 "github.com/redpanda-data/redpanda-operator/operator/api/redpanda/v1alpha2"
	v1 "k8s.io/api/core/v1"
)

// StatefulsetApplyConfiguration represents an declarative configuration of the Statefulset type for use
// with apply.
type StatefulsetApplyConfiguration struct {
	AdditionalSelectorsLabels     map[string]string                             `json:"additionalSelectorLabels,omitempty"`
	AdditionalRedpandaCmdFlags    []string                                      `json:"additionalRedpandaCmdFlags,omitempty"`
	Annotations                   map[string]string                             `json:"annotations,omitempty"`
	PodTemplate                   *PodTemplateApplyConfiguration                `json:"podTemplate,omitempty"`
	Budget                        *BudgetApplyConfiguration                     `json:"budget,omitempty"`
	ExtraVolumeMounts             *string                                       `json:"extraVolumeMounts,omitempty"`
	ExtraVolumes                  *string                                       `json:"extraVolumes,omitempty"`
	InitContainerImage            *InitContainerImageApplyConfiguration         `json:"initContainerImage,omitempty"`
	InitContainers                *InitContainersApplyConfiguration             `json:"initContainers,omitempty"`
	LivenessProbe                 *LivenessProbeApplyConfiguration              `json:"livenessProbe,omitempty"`
	NodeSelector                  map[string]string                             `json:"nodeSelector,omitempty"`
	PodAffinity                   *v1.PodAffinity                               `json:"podAffinity,omitempty"`
	PodAntiAffinity               *PodAntiAffinityApplyConfiguration            `json:"podAntiAffinity,omitempty"`
	PriorityClassName             *string                                       `json:"priorityClassName,omitempty"`
	ReadinessProbe                *ReadinessProbeApplyConfiguration             `json:"readinessProbe,omitempty"`
	Replicas                      *int                                          `json:"replicas,omitempty"`
	SecurityContext               *v1.SecurityContext                           `json:"securityContext,omitempty"`
	SideCars                      *SideCarsApplyConfiguration                   `json:"sideCars,omitempty"`
	SkipChown                     *bool                                         `json:"skipChown,omitempty"`
	StartupProbe                  *StartupProbeApplyConfiguration               `json:"startupProbe,omitempty"`
	Tolerations                   []v1.Toleration                               `json:"tolerations,omitempty"`
	TopologySpreadConstraints     []*redpandav1alpha2.TopologySpreadConstraints `json:"topologySpreadConstraints,omitempty"`
	UpdateStrategy                *UpdateStrategyApplyConfiguration             `json:"updateStrategy,omitempty"`
	TerminationGracePeriodSeconds *int                                          `json:"terminationGracePeriodSeconds,omitempty"`
}

// StatefulsetApplyConfiguration constructs an declarative configuration of the Statefulset type for use with
// apply.
func Statefulset() *StatefulsetApplyConfiguration {
	return &StatefulsetApplyConfiguration{}
}

// WithAdditionalSelectorsLabels puts the entries into the AdditionalSelectorsLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AdditionalSelectorsLabels field,
// overwriting an existing map entries in AdditionalSelectorsLabels field with the same key.
func (b *StatefulsetApplyConfiguration) WithAdditionalSelectorsLabels(entries map[string]string) *StatefulsetApplyConfiguration {
	if b.AdditionalSelectorsLabels == nil && len(entries) > 0 {
		b.AdditionalSelectorsLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.AdditionalSelectorsLabels[k] = v
	}
	return b
}

// WithAdditionalRedpandaCmdFlags adds the given value to the AdditionalRedpandaCmdFlags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AdditionalRedpandaCmdFlags field.
func (b *StatefulsetApplyConfiguration) WithAdditionalRedpandaCmdFlags(values ...string) *StatefulsetApplyConfiguration {
	for i := range values {
		b.AdditionalRedpandaCmdFlags = append(b.AdditionalRedpandaCmdFlags, values[i])
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *StatefulsetApplyConfiguration) WithAnnotations(entries map[string]string) *StatefulsetApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithPodTemplate sets the PodTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodTemplate field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithPodTemplate(value *PodTemplateApplyConfiguration) *StatefulsetApplyConfiguration {
	b.PodTemplate = value
	return b
}

// WithBudget sets the Budget field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Budget field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithBudget(value *BudgetApplyConfiguration) *StatefulsetApplyConfiguration {
	b.Budget = value
	return b
}

// WithExtraVolumeMounts sets the ExtraVolumeMounts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExtraVolumeMounts field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithExtraVolumeMounts(value string) *StatefulsetApplyConfiguration {
	b.ExtraVolumeMounts = &value
	return b
}

// WithExtraVolumes sets the ExtraVolumes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExtraVolumes field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithExtraVolumes(value string) *StatefulsetApplyConfiguration {
	b.ExtraVolumes = &value
	return b
}

// WithInitContainerImage sets the InitContainerImage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InitContainerImage field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithInitContainerImage(value *InitContainerImageApplyConfiguration) *StatefulsetApplyConfiguration {
	b.InitContainerImage = value
	return b
}

// WithInitContainers sets the InitContainers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InitContainers field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithInitContainers(value *InitContainersApplyConfiguration) *StatefulsetApplyConfiguration {
	b.InitContainers = value
	return b
}

// WithLivenessProbe sets the LivenessProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LivenessProbe field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithLivenessProbe(value *LivenessProbeApplyConfiguration) *StatefulsetApplyConfiguration {
	b.LivenessProbe = value
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *StatefulsetApplyConfiguration) WithNodeSelector(entries map[string]string) *StatefulsetApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithPodAffinity sets the PodAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodAffinity field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithPodAffinity(value v1.PodAffinity) *StatefulsetApplyConfiguration {
	b.PodAffinity = &value
	return b
}

// WithPodAntiAffinity sets the PodAntiAffinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodAntiAffinity field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithPodAntiAffinity(value *PodAntiAffinityApplyConfiguration) *StatefulsetApplyConfiguration {
	b.PodAntiAffinity = value
	return b
}

// WithPriorityClassName sets the PriorityClassName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PriorityClassName field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithPriorityClassName(value string) *StatefulsetApplyConfiguration {
	b.PriorityClassName = &value
	return b
}

// WithReadinessProbe sets the ReadinessProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadinessProbe field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithReadinessProbe(value *ReadinessProbeApplyConfiguration) *StatefulsetApplyConfiguration {
	b.ReadinessProbe = value
	return b
}

// WithReplicas sets the Replicas field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Replicas field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithReplicas(value int) *StatefulsetApplyConfiguration {
	b.Replicas = &value
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithSecurityContext(value v1.SecurityContext) *StatefulsetApplyConfiguration {
	b.SecurityContext = &value
	return b
}

// WithSideCars sets the SideCars field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SideCars field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithSideCars(value *SideCarsApplyConfiguration) *StatefulsetApplyConfiguration {
	b.SideCars = value
	return b
}

// WithSkipChown sets the SkipChown field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SkipChown field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithSkipChown(value bool) *StatefulsetApplyConfiguration {
	b.SkipChown = &value
	return b
}

// WithStartupProbe sets the StartupProbe field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartupProbe field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithStartupProbe(value *StartupProbeApplyConfiguration) *StatefulsetApplyConfiguration {
	b.StartupProbe = value
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *StatefulsetApplyConfiguration) WithTolerations(values ...v1.Toleration) *StatefulsetApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithTopologySpreadConstraints adds the given value to the TopologySpreadConstraints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TopologySpreadConstraints field.
func (b *StatefulsetApplyConfiguration) WithTopologySpreadConstraints(values ...**redpandav1alpha2.TopologySpreadConstraints) *StatefulsetApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTopologySpreadConstraints")
		}
		b.TopologySpreadConstraints = append(b.TopologySpreadConstraints, *values[i])
	}
	return b
}

// WithUpdateStrategy sets the UpdateStrategy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpdateStrategy field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithUpdateStrategy(value *UpdateStrategyApplyConfiguration) *StatefulsetApplyConfiguration {
	b.UpdateStrategy = value
	return b
}

// WithTerminationGracePeriodSeconds sets the TerminationGracePeriodSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TerminationGracePeriodSeconds field is set to the value of the last call.
func (b *StatefulsetApplyConfiguration) WithTerminationGracePeriodSeconds(value int) *StatefulsetApplyConfiguration {
	b.TerminationGracePeriodSeconds = &value
	return b
}
