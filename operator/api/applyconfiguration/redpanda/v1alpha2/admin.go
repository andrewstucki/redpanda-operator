// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/redpanda-data/redpanda-operator/operator/api/redpanda/v1alpha2"
)

// AdminApplyConfiguration represents an declarative configuration of the Admin type for use
// with apply.
type AdminApplyConfiguration struct {
	External    map[string]*v1alpha2.ExternalListener `json:"external,omitempty"`
	Port        *int                                  `json:"port,omitempty"`
	TLS         *ListenerTLSApplyConfiguration        `json:"tls,omitempty"`
	AppProtocol *string                               `json:"appProtocol,omitempty"`
}

// AdminApplyConfiguration constructs an declarative configuration of the Admin type for use with
// apply.
func Admin() *AdminApplyConfiguration {
	return &AdminApplyConfiguration{}
}

// WithExternal puts the entries into the External field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the External field,
// overwriting an existing map entries in External field with the same key.
func (b *AdminApplyConfiguration) WithExternal(entries map[string]*v1alpha2.ExternalListener) *AdminApplyConfiguration {
	if b.External == nil && len(entries) > 0 {
		b.External = make(map[string]*v1alpha2.ExternalListener, len(entries))
	}
	for k, v := range entries {
		b.External[k] = v
	}
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *AdminApplyConfiguration) WithPort(value int) *AdminApplyConfiguration {
	b.Port = &value
	return b
}

// WithTLS sets the TLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLS field is set to the value of the last call.
func (b *AdminApplyConfiguration) WithTLS(value *ListenerTLSApplyConfiguration) *AdminApplyConfiguration {
	b.TLS = value
	return b
}

// WithAppProtocol sets the AppProtocol field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AppProtocol field is set to the value of the last call.
func (b *AdminApplyConfiguration) WithAppProtocol(value string) *AdminApplyConfiguration {
	b.AppProtocol = &value
	return b
}
