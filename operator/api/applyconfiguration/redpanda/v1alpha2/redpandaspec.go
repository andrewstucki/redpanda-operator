// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// RedpandaSpecApplyConfiguration represents an declarative configuration of the RedpandaSpec type for use
// with apply.
type RedpandaSpecApplyConfiguration struct {
	ChartRef    *ChartRefApplyConfiguration            `json:"chartRef,omitempty"`
	ClusterSpec *RedpandaClusterSpecApplyConfiguration `json:"clusterSpec,omitempty"`
	Migration   *MigrationApplyConfiguration           `json:"migration,omitempty"`
}

// RedpandaSpecApplyConfiguration constructs an declarative configuration of the RedpandaSpec type for use with
// apply.
func RedpandaSpec() *RedpandaSpecApplyConfiguration {
	return &RedpandaSpecApplyConfiguration{}
}

// WithChartRef sets the ChartRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ChartRef field is set to the value of the last call.
func (b *RedpandaSpecApplyConfiguration) WithChartRef(value *ChartRefApplyConfiguration) *RedpandaSpecApplyConfiguration {
	b.ChartRef = value
	return b
}

// WithClusterSpec sets the ClusterSpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterSpec field is set to the value of the last call.
func (b *RedpandaSpecApplyConfiguration) WithClusterSpec(value *RedpandaClusterSpecApplyConfiguration) *RedpandaSpecApplyConfiguration {
	b.ClusterSpec = value
	return b
}

// WithMigration sets the Migration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Migration field is set to the value of the last call.
func (b *RedpandaSpecApplyConfiguration) WithMigration(value *MigrationApplyConfiguration) *RedpandaSpecApplyConfiguration {
	b.Migration = value
	return b
}
