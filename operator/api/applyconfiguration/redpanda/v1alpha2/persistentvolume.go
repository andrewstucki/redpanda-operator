// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// PersistentVolumeApplyConfiguration represents an declarative configuration of the PersistentVolume type for use
// with apply.
type PersistentVolumeApplyConfiguration struct {
	Annotations   map[string]string  `json:"annotations,omitempty"`
	Enabled       *bool              `json:"enabled,omitempty"`
	Labels        map[string]string  `json:"labels,omitempty"`
	Size          *resource.Quantity `json:"size,omitempty"`
	StorageClass  *string            `json:"storageClass,omitempty"`
	NameOverwrite *string            `json:"nameOverwrite,omitempty"`
}

// PersistentVolumeApplyConfiguration constructs an declarative configuration of the PersistentVolume type for use with
// apply.
func PersistentVolume() *PersistentVolumeApplyConfiguration {
	return &PersistentVolumeApplyConfiguration{}
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *PersistentVolumeApplyConfiguration) WithAnnotations(entries map[string]string) *PersistentVolumeApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *PersistentVolumeApplyConfiguration) WithEnabled(value bool) *PersistentVolumeApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *PersistentVolumeApplyConfiguration) WithLabels(entries map[string]string) *PersistentVolumeApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithSize sets the Size field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Size field is set to the value of the last call.
func (b *PersistentVolumeApplyConfiguration) WithSize(value resource.Quantity) *PersistentVolumeApplyConfiguration {
	b.Size = &value
	return b
}

// WithStorageClass sets the StorageClass field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StorageClass field is set to the value of the last call.
func (b *PersistentVolumeApplyConfiguration) WithStorageClass(value string) *PersistentVolumeApplyConfiguration {
	b.StorageClass = &value
	return b
}

// WithNameOverwrite sets the NameOverwrite field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NameOverwrite field is set to the value of the last call.
func (b *PersistentVolumeApplyConfiguration) WithNameOverwrite(value string) *PersistentVolumeApplyConfiguration {
	b.NameOverwrite = &value
	return b
}
