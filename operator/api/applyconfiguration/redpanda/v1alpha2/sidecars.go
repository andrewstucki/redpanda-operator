// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// SideCarsApplyConfiguration represents an declarative configuration of the SideCars type for use
// with apply.
type SideCarsApplyConfiguration struct {
	ConfigWatcher *ConfigWatcherApplyConfiguration `json:"configWatcher,omitempty"`
	RpkStatus     *SideCarObjApplyConfiguration    `json:"rpkStatus,omitempty"`
	Controllers   *RPControllersApplyConfiguration `json:"controllers,omitempty"`
}

// SideCarsApplyConfiguration constructs an declarative configuration of the SideCars type for use with
// apply.
func SideCars() *SideCarsApplyConfiguration {
	return &SideCarsApplyConfiguration{}
}

// WithConfigWatcher sets the ConfigWatcher field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigWatcher field is set to the value of the last call.
func (b *SideCarsApplyConfiguration) WithConfigWatcher(value *ConfigWatcherApplyConfiguration) *SideCarsApplyConfiguration {
	b.ConfigWatcher = value
	return b
}

// WithRpkStatus sets the RpkStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RpkStatus field is set to the value of the last call.
func (b *SideCarsApplyConfiguration) WithRpkStatus(value *SideCarObjApplyConfiguration) *SideCarsApplyConfiguration {
	b.RpkStatus = value
	return b
}

// WithControllers sets the Controllers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Controllers field is set to the value of the last call.
func (b *SideCarsApplyConfiguration) WithControllers(value *RPControllersApplyConfiguration) *SideCarsApplyConfiguration {
	b.Controllers = value
	return b
}
