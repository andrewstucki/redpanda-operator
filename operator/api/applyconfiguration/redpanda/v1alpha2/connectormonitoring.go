// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
)

// ConnectorMonitoringApplyConfiguration represents an declarative configuration of the ConnectorMonitoring type for use
// with apply.
type ConnectorMonitoringApplyConfiguration struct {
	Enabled           *bool                 `json:"enabled,omitempty"`
	Labels            map[string]string     `json:"labels,omitempty"`
	ScrapeInterval    *string               `json:"scrapeInterval,omitempty"`
	Annotations       map[string]string     `json:"annotations,omitempty"`
	NamespaceSelector *v1.NamespaceSelector `json:"namespaceSelector,omitempty"`
}

// ConnectorMonitoringApplyConfiguration constructs an declarative configuration of the ConnectorMonitoring type for use with
// apply.
func ConnectorMonitoring() *ConnectorMonitoringApplyConfiguration {
	return &ConnectorMonitoringApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *ConnectorMonitoringApplyConfiguration) WithEnabled(value bool) *ConnectorMonitoringApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *ConnectorMonitoringApplyConfiguration) WithLabels(entries map[string]string) *ConnectorMonitoringApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithScrapeInterval sets the ScrapeInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScrapeInterval field is set to the value of the last call.
func (b *ConnectorMonitoringApplyConfiguration) WithScrapeInterval(value string) *ConnectorMonitoringApplyConfiguration {
	b.ScrapeInterval = &value
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *ConnectorMonitoringApplyConfiguration) WithAnnotations(entries map[string]string) *ConnectorMonitoringApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithNamespaceSelector sets the NamespaceSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NamespaceSelector field is set to the value of the last call.
func (b *ConnectorMonitoringApplyConfiguration) WithNamespaceSelector(value v1.NamespaceSelector) *ConnectorMonitoringApplyConfiguration {
	b.NamespaceSelector = &value
	return b
}
