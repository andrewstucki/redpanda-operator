// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// CertificateApplyConfiguration represents an declarative configuration of the Certificate type for use
// with apply.
type CertificateApplyConfiguration struct {
	IssuerRef             *IssuerRefApplyConfiguration `json:"issuerRef,omitempty"`
	SecretRef             *SecretRefApplyConfiguration `json:"secretRef,omitempty"`
	ClientSecretRef       *SecretRefApplyConfiguration `json:"clientSecretRef,omitempty"`
	Duration              *v1.Duration                 `json:"duration,omitempty"`
	CAEnabled             *bool                        `json:"caEnabled,omitempty"`
	ApplyInternalDNSNames *bool                        `json:"applyInternalDNSNames,omitempty"`
	Enabled               *bool                        `json:"enabled,omitempty"`
}

// CertificateApplyConfiguration constructs an declarative configuration of the Certificate type for use with
// apply.
func Certificate() *CertificateApplyConfiguration {
	return &CertificateApplyConfiguration{}
}

// WithIssuerRef sets the IssuerRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IssuerRef field is set to the value of the last call.
func (b *CertificateApplyConfiguration) WithIssuerRef(value *IssuerRefApplyConfiguration) *CertificateApplyConfiguration {
	b.IssuerRef = value
	return b
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *CertificateApplyConfiguration) WithSecretRef(value *SecretRefApplyConfiguration) *CertificateApplyConfiguration {
	b.SecretRef = value
	return b
}

// WithClientSecretRef sets the ClientSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClientSecretRef field is set to the value of the last call.
func (b *CertificateApplyConfiguration) WithClientSecretRef(value *SecretRefApplyConfiguration) *CertificateApplyConfiguration {
	b.ClientSecretRef = value
	return b
}

// WithDuration sets the Duration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Duration field is set to the value of the last call.
func (b *CertificateApplyConfiguration) WithDuration(value v1.Duration) *CertificateApplyConfiguration {
	b.Duration = &value
	return b
}

// WithCAEnabled sets the CAEnabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CAEnabled field is set to the value of the last call.
func (b *CertificateApplyConfiguration) WithCAEnabled(value bool) *CertificateApplyConfiguration {
	b.CAEnabled = &value
	return b
}

// WithApplyInternalDNSNames sets the ApplyInternalDNSNames field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ApplyInternalDNSNames field is set to the value of the last call.
func (b *CertificateApplyConfiguration) WithApplyInternalDNSNames(value bool) *CertificateApplyConfiguration {
	b.ApplyInternalDNSNames = &value
	return b
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *CertificateApplyConfiguration) WithEnabled(value bool) *CertificateApplyConfiguration {
	b.Enabled = &value
	return b
}
