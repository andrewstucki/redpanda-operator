// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// ListenerTLSApplyConfiguration represents an declarative configuration of the ListenerTLS type for use
// with apply.
type ListenerTLSApplyConfiguration struct {
	Cert              *string                       `json:"cert,omitempty"`
	Enabled           *bool                         `json:"enabled,omitempty"`
	SecretRef         *string                       `json:"secretRef,omitempty"`
	RequireClientAuth *bool                         `json:"requireClientAuth,omitempty"`
	TrustStore        *TrustStoreApplyConfiguration `json:"trustStore,omitempty"`
}

// ListenerTLSApplyConfiguration constructs an declarative configuration of the ListenerTLS type for use with
// apply.
func ListenerTLS() *ListenerTLSApplyConfiguration {
	return &ListenerTLSApplyConfiguration{}
}

// WithCert sets the Cert field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cert field is set to the value of the last call.
func (b *ListenerTLSApplyConfiguration) WithCert(value string) *ListenerTLSApplyConfiguration {
	b.Cert = &value
	return b
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *ListenerTLSApplyConfiguration) WithEnabled(value bool) *ListenerTLSApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *ListenerTLSApplyConfiguration) WithSecretRef(value string) *ListenerTLSApplyConfiguration {
	b.SecretRef = &value
	return b
}

// WithRequireClientAuth sets the RequireClientAuth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RequireClientAuth field is set to the value of the last call.
func (b *ListenerTLSApplyConfiguration) WithRequireClientAuth(value bool) *ListenerTLSApplyConfiguration {
	b.RequireClientAuth = &value
	return b
}

// WithTrustStore sets the TrustStore field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TrustStore field is set to the value of the last call.
func (b *ListenerTLSApplyConfiguration) WithTrustStore(value *TrustStoreApplyConfiguration) *ListenerTLSApplyConfiguration {
	b.TrustStore = value
	return b
}
