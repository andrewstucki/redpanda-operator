// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ChartRefApplyConfiguration represents an declarative configuration of the ChartRef type for use
// with apply.
type ChartRefApplyConfiguration struct {
	ChartName          *string                        `json:"chartName,omitempty"`
	ChartVersion       *string                        `json:"chartVersion,omitempty"`
	HelmRepositoryName *string                        `json:"helmRepositoryName,omitempty"`
	Timeout            *v1.Duration                   `json:"timeout,omitempty"`
	Upgrade            *HelmUpgradeApplyConfiguration `json:"upgrade,omitempty"`
	UseFlux            *bool                          `json:"useFlux,omitempty"`
}

// ChartRefApplyConfiguration constructs an declarative configuration of the ChartRef type for use with
// apply.
func ChartRef() *ChartRefApplyConfiguration {
	return &ChartRefApplyConfiguration{}
}

// WithChartName sets the ChartName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ChartName field is set to the value of the last call.
func (b *ChartRefApplyConfiguration) WithChartName(value string) *ChartRefApplyConfiguration {
	b.ChartName = &value
	return b
}

// WithChartVersion sets the ChartVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ChartVersion field is set to the value of the last call.
func (b *ChartRefApplyConfiguration) WithChartVersion(value string) *ChartRefApplyConfiguration {
	b.ChartVersion = &value
	return b
}

// WithHelmRepositoryName sets the HelmRepositoryName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HelmRepositoryName field is set to the value of the last call.
func (b *ChartRefApplyConfiguration) WithHelmRepositoryName(value string) *ChartRefApplyConfiguration {
	b.HelmRepositoryName = &value
	return b
}

// WithTimeout sets the Timeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Timeout field is set to the value of the last call.
func (b *ChartRefApplyConfiguration) WithTimeout(value v1.Duration) *ChartRefApplyConfiguration {
	b.Timeout = &value
	return b
}

// WithUpgrade sets the Upgrade field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Upgrade field is set to the value of the last call.
func (b *ChartRefApplyConfiguration) WithUpgrade(value *HelmUpgradeApplyConfiguration) *ChartRefApplyConfiguration {
	b.Upgrade = value
	return b
}

// WithUseFlux sets the UseFlux field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UseFlux field is set to the value of the last call.
func (b *ChartRefApplyConfiguration) WithUseFlux(value bool) *ChartRefApplyConfiguration {
	b.UseFlux = &value
	return b
}
