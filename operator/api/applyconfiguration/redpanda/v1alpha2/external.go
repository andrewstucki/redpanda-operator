// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// ExternalApplyConfiguration represents an declarative configuration of the External type for use
// with apply.
type ExternalApplyConfiguration struct {
	Addresses      []string                           `json:"addresses,omitempty"`
	Annotations    map[string]string                  `json:"annotations,omitempty"`
	Domain         *string                            `json:"domain,omitempty"`
	Enabled        *bool                              `json:"enabled,omitempty"`
	Service        *ExternalServiceApplyConfiguration `json:"service,omitempty"`
	SourceRanges   []string                           `json:"sourceRanges,omitempty"`
	Type           *string                            `json:"type,omitempty"`
	ExternalDNS    *ExternalDNSApplyConfiguration     `json:"externalDns,omitempty"`
	PrefixTemplate *string                            `json:"prefixTemplate,omitempty"`
}

// ExternalApplyConfiguration constructs an declarative configuration of the External type for use with
// apply.
func External() *ExternalApplyConfiguration {
	return &ExternalApplyConfiguration{}
}

// WithAddresses adds the given value to the Addresses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Addresses field.
func (b *ExternalApplyConfiguration) WithAddresses(values ...string) *ExternalApplyConfiguration {
	for i := range values {
		b.Addresses = append(b.Addresses, values[i])
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *ExternalApplyConfiguration) WithAnnotations(entries map[string]string) *ExternalApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithDomain sets the Domain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Domain field is set to the value of the last call.
func (b *ExternalApplyConfiguration) WithDomain(value string) *ExternalApplyConfiguration {
	b.Domain = &value
	return b
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *ExternalApplyConfiguration) WithEnabled(value bool) *ExternalApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithService sets the Service field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Service field is set to the value of the last call.
func (b *ExternalApplyConfiguration) WithService(value *ExternalServiceApplyConfiguration) *ExternalApplyConfiguration {
	b.Service = value
	return b
}

// WithSourceRanges adds the given value to the SourceRanges field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SourceRanges field.
func (b *ExternalApplyConfiguration) WithSourceRanges(values ...string) *ExternalApplyConfiguration {
	for i := range values {
		b.SourceRanges = append(b.SourceRanges, values[i])
	}
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *ExternalApplyConfiguration) WithType(value string) *ExternalApplyConfiguration {
	b.Type = &value
	return b
}

// WithExternalDNS sets the ExternalDNS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExternalDNS field is set to the value of the last call.
func (b *ExternalApplyConfiguration) WithExternalDNS(value *ExternalDNSApplyConfiguration) *ExternalApplyConfiguration {
	b.ExternalDNS = value
	return b
}

// WithPrefixTemplate sets the PrefixTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PrefixTemplate field is set to the value of the last call.
func (b *ExternalApplyConfiguration) WithPrefixTemplate(value string) *ExternalApplyConfiguration {
	b.PrefixTemplate = &value
	return b
}
