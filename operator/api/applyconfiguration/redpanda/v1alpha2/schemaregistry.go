// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/redpanda-data/redpanda-operator/operator/api/redpanda/v1alpha2"
)

// SchemaRegistryApplyConfiguration represents an declarative configuration of the SchemaRegistry type for use
// with apply.
type SchemaRegistryApplyConfiguration struct {
	AuthenticationMethod *string                               `json:"authenticationMethod,omitempty"`
	Enabled              *bool                                 `json:"enabled,omitempty"`
	External             map[string]*v1alpha2.ExternalListener `json:"external,omitempty"`
	KafkaEndpoint        *string                               `json:"kafkaEndpoint,omitempty"`
	Port                 *int                                  `json:"port,omitempty"`
	TLS                  *ListenerTLSApplyConfiguration        `json:"tls,omitempty"`
}

// SchemaRegistryApplyConfiguration constructs an declarative configuration of the SchemaRegistry type for use with
// apply.
func SchemaRegistry() *SchemaRegistryApplyConfiguration {
	return &SchemaRegistryApplyConfiguration{}
}

// WithAuthenticationMethod sets the AuthenticationMethod field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AuthenticationMethod field is set to the value of the last call.
func (b *SchemaRegistryApplyConfiguration) WithAuthenticationMethod(value string) *SchemaRegistryApplyConfiguration {
	b.AuthenticationMethod = &value
	return b
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *SchemaRegistryApplyConfiguration) WithEnabled(value bool) *SchemaRegistryApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithExternal puts the entries into the External field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the External field,
// overwriting an existing map entries in External field with the same key.
func (b *SchemaRegistryApplyConfiguration) WithExternal(entries map[string]*v1alpha2.ExternalListener) *SchemaRegistryApplyConfiguration {
	if b.External == nil && len(entries) > 0 {
		b.External = make(map[string]*v1alpha2.ExternalListener, len(entries))
	}
	for k, v := range entries {
		b.External[k] = v
	}
	return b
}

// WithKafkaEndpoint sets the KafkaEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KafkaEndpoint field is set to the value of the last call.
func (b *SchemaRegistryApplyConfiguration) WithKafkaEndpoint(value string) *SchemaRegistryApplyConfiguration {
	b.KafkaEndpoint = &value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *SchemaRegistryApplyConfiguration) WithPort(value int) *SchemaRegistryApplyConfiguration {
	b.Port = &value
	return b
}

// WithTLS sets the TLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLS field is set to the value of the last call.
func (b *SchemaRegistryApplyConfiguration) WithTLS(value *ListenerTLSApplyConfiguration) *SchemaRegistryApplyConfiguration {
	b.TLS = value
	return b
}
