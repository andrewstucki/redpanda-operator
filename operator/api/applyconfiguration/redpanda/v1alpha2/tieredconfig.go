// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	apiutil "github.com/redpanda-data/redpanda-operator/operator/api/apiutil"
)

// TieredConfigApplyConfiguration represents an declarative configuration of the TieredConfig type for use
// with apply.
type TieredConfigApplyConfiguration struct {
	CloudStorageEnabled                     *apiutil.JSONBoolean `json:"cloud_storage_enabled,omitempty"`
	CloudStorageAPIEndpoint                 *string              `json:"cloud_storage_api_endpoint,omitempty"`
	CloudStorageAPIEndpointPort             *int                 `json:"cloud_storage_api_endpoint_port,omitempty"`
	CloudStorageBucket                      *string              `json:"cloud_storage_bucket,omitempty"`
	CloudStorageAzureContainer              *string              `json:"cloud_storage_azure_container,omitempty"`
	CloudStorageAzureManagedIdentityID      *string              `json:"cloud_storage_azure_managed_identity_id,omitempty"`
	CloudStorageAzureStorageAccount         *string              `json:"cloud_storage_azure_storage_account,omitempty"`
	CloudStorageAzureSharedKey              *string              `json:"cloud_storage_azure_shared_key,omitempty"`
	CloudStorageAzureADLSEndpoint           *string              `json:"cloud_storage_azure_adls_endpoint,omitempty"`
	CloudStorageAzureADLSPort               *int                 `json:"cloud_storage_azure_adls_port,omitempty"`
	CloudStorageCacheCheckInterval          *int                 `json:"cloud_storage_cache_check_interval,omitempty"`
	CloudStorageCacheDirectory              *string              `json:"cloud_storage_cache_directory,omitempty"`
	CloudStorageCacheSize                   *string              `json:"cloud_storage_cache_size,omitempty"`
	CloudStorageCredentialsSource           *string              `json:"cloud_storage_credentials_source,omitempty"`
	CloudStorageDisableTLS                  *bool                `json:"cloud_storage_disable_tls,omitempty"`
	CloudStorageEnableRemoteRead            *bool                `json:"cloud_storage_enable_remote_read,omitempty"`
	CloudStorageEnableRemoteWrite           *bool                `json:"cloud_storage_enable_remote_write,omitempty"`
	CloudStorageInitialBackoffMs            *int                 `json:"cloud_storage_initial_backoff_ms,omitempty"`
	CloudStorageManifestUploadTimeoutMs     *int                 `json:"cloud_storage_manifest_upload_timeout_ms,omitempty"`
	CloudStorageMaxConnectionIdleTimeMs     *int                 `json:"cloud_storage_max_connection_idle_time_ms,omitempty"`
	CloudStorageMaxConnections              *int                 `json:"cloud_storage_max_connections,omitempty"`
	CloudStorageReconciliationIntervalMs    *int                 `json:"cloud_storage_reconciliation_interval_ms,omitempty"`
	CloudStorageRegion                      *string              `json:"cloud_storage_region,omitempty"`
	CloudStorageSegmentMaxUploadIntervalSec *int                 `json:"cloud_storage_segment_max_upload_interval_sec,omitempty"`
	CloudStorageSegmentUploadTimeoutMs      *int                 `json:"cloud_storage_segment_upload_timeout_ms,omitempty"`
	CloudStorageTrustFile                   *string              `json:"cloud_storage_trust_file,omitempty"`
	CloudStorageUploadCtrlDCoeff            *int                 `json:"cloud_storage_upload_ctrl_d_coeff,omitempty"`
	CloudStorageUploadCtrlMaxShares         *int                 `json:"cloud_storage_upload_ctrl_max_shares,omitempty"`
	CloudStorageUploadCtrlMinShares         *int                 `json:"cloud_storage_upload_ctrl_min_shares,omitempty"`
	CloudStorageUploadCtrlPCoeff            *int                 `json:"cloud_storage_upload_ctrl_p_coeff,omitempty"`
	CloudStorageUploadCtrlUpdateIntervalMs  *int                 `json:"cloud_storage_upload_ctrl_update_interval_ms,omitempty"`
}

// TieredConfigApplyConfiguration constructs an declarative configuration of the TieredConfig type for use with
// apply.
func TieredConfig() *TieredConfigApplyConfiguration {
	return &TieredConfigApplyConfiguration{}
}

// WithCloudStorageEnabled sets the CloudStorageEnabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageEnabled field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageEnabled(value apiutil.JSONBoolean) *TieredConfigApplyConfiguration {
	b.CloudStorageEnabled = &value
	return b
}

// WithCloudStorageAPIEndpoint sets the CloudStorageAPIEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageAPIEndpoint field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageAPIEndpoint(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageAPIEndpoint = &value
	return b
}

// WithCloudStorageAPIEndpointPort sets the CloudStorageAPIEndpointPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageAPIEndpointPort field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageAPIEndpointPort(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageAPIEndpointPort = &value
	return b
}

// WithCloudStorageBucket sets the CloudStorageBucket field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageBucket field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageBucket(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageBucket = &value
	return b
}

// WithCloudStorageAzureContainer sets the CloudStorageAzureContainer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageAzureContainer field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageAzureContainer(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageAzureContainer = &value
	return b
}

// WithCloudStorageAzureManagedIdentityID sets the CloudStorageAzureManagedIdentityID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageAzureManagedIdentityID field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageAzureManagedIdentityID(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageAzureManagedIdentityID = &value
	return b
}

// WithCloudStorageAzureStorageAccount sets the CloudStorageAzureStorageAccount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageAzureStorageAccount field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageAzureStorageAccount(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageAzureStorageAccount = &value
	return b
}

// WithCloudStorageAzureSharedKey sets the CloudStorageAzureSharedKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageAzureSharedKey field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageAzureSharedKey(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageAzureSharedKey = &value
	return b
}

// WithCloudStorageAzureADLSEndpoint sets the CloudStorageAzureADLSEndpoint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageAzureADLSEndpoint field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageAzureADLSEndpoint(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageAzureADLSEndpoint = &value
	return b
}

// WithCloudStorageAzureADLSPort sets the CloudStorageAzureADLSPort field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageAzureADLSPort field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageAzureADLSPort(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageAzureADLSPort = &value
	return b
}

// WithCloudStorageCacheCheckInterval sets the CloudStorageCacheCheckInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageCacheCheckInterval field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageCacheCheckInterval(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageCacheCheckInterval = &value
	return b
}

// WithCloudStorageCacheDirectory sets the CloudStorageCacheDirectory field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageCacheDirectory field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageCacheDirectory(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageCacheDirectory = &value
	return b
}

// WithCloudStorageCacheSize sets the CloudStorageCacheSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageCacheSize field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageCacheSize(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageCacheSize = &value
	return b
}

// WithCloudStorageCredentialsSource sets the CloudStorageCredentialsSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageCredentialsSource field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageCredentialsSource(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageCredentialsSource = &value
	return b
}

// WithCloudStorageDisableTLS sets the CloudStorageDisableTLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageDisableTLS field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageDisableTLS(value bool) *TieredConfigApplyConfiguration {
	b.CloudStorageDisableTLS = &value
	return b
}

// WithCloudStorageEnableRemoteRead sets the CloudStorageEnableRemoteRead field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageEnableRemoteRead field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageEnableRemoteRead(value bool) *TieredConfigApplyConfiguration {
	b.CloudStorageEnableRemoteRead = &value
	return b
}

// WithCloudStorageEnableRemoteWrite sets the CloudStorageEnableRemoteWrite field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageEnableRemoteWrite field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageEnableRemoteWrite(value bool) *TieredConfigApplyConfiguration {
	b.CloudStorageEnableRemoteWrite = &value
	return b
}

// WithCloudStorageInitialBackoffMs sets the CloudStorageInitialBackoffMs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageInitialBackoffMs field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageInitialBackoffMs(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageInitialBackoffMs = &value
	return b
}

// WithCloudStorageManifestUploadTimeoutMs sets the CloudStorageManifestUploadTimeoutMs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageManifestUploadTimeoutMs field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageManifestUploadTimeoutMs(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageManifestUploadTimeoutMs = &value
	return b
}

// WithCloudStorageMaxConnectionIdleTimeMs sets the CloudStorageMaxConnectionIdleTimeMs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageMaxConnectionIdleTimeMs field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageMaxConnectionIdleTimeMs(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageMaxConnectionIdleTimeMs = &value
	return b
}

// WithCloudStorageMaxConnections sets the CloudStorageMaxConnections field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageMaxConnections field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageMaxConnections(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageMaxConnections = &value
	return b
}

// WithCloudStorageReconciliationIntervalMs sets the CloudStorageReconciliationIntervalMs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageReconciliationIntervalMs field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageReconciliationIntervalMs(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageReconciliationIntervalMs = &value
	return b
}

// WithCloudStorageRegion sets the CloudStorageRegion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageRegion field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageRegion(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageRegion = &value
	return b
}

// WithCloudStorageSegmentMaxUploadIntervalSec sets the CloudStorageSegmentMaxUploadIntervalSec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageSegmentMaxUploadIntervalSec field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageSegmentMaxUploadIntervalSec(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageSegmentMaxUploadIntervalSec = &value
	return b
}

// WithCloudStorageSegmentUploadTimeoutMs sets the CloudStorageSegmentUploadTimeoutMs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageSegmentUploadTimeoutMs field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageSegmentUploadTimeoutMs(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageSegmentUploadTimeoutMs = &value
	return b
}

// WithCloudStorageTrustFile sets the CloudStorageTrustFile field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageTrustFile field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageTrustFile(value string) *TieredConfigApplyConfiguration {
	b.CloudStorageTrustFile = &value
	return b
}

// WithCloudStorageUploadCtrlDCoeff sets the CloudStorageUploadCtrlDCoeff field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageUploadCtrlDCoeff field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageUploadCtrlDCoeff(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageUploadCtrlDCoeff = &value
	return b
}

// WithCloudStorageUploadCtrlMaxShares sets the CloudStorageUploadCtrlMaxShares field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageUploadCtrlMaxShares field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageUploadCtrlMaxShares(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageUploadCtrlMaxShares = &value
	return b
}

// WithCloudStorageUploadCtrlMinShares sets the CloudStorageUploadCtrlMinShares field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageUploadCtrlMinShares field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageUploadCtrlMinShares(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageUploadCtrlMinShares = &value
	return b
}

// WithCloudStorageUploadCtrlPCoeff sets the CloudStorageUploadCtrlPCoeff field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageUploadCtrlPCoeff field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageUploadCtrlPCoeff(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageUploadCtrlPCoeff = &value
	return b
}

// WithCloudStorageUploadCtrlUpdateIntervalMs sets the CloudStorageUploadCtrlUpdateIntervalMs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CloudStorageUploadCtrlUpdateIntervalMs field is set to the value of the last call.
func (b *TieredConfigApplyConfiguration) WithCloudStorageUploadCtrlUpdateIntervalMs(value int) *TieredConfigApplyConfiguration {
	b.CloudStorageUploadCtrlUpdateIntervalMs = &value
	return b
}
