// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	meta "github.com/fluxcd/pkg/apis/meta"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// RedpandaStatusApplyConfiguration represents an declarative configuration of the RedpandaStatus type for use
// with apply.
type RedpandaStatusApplyConfiguration struct {
	ObservedGeneration          *int64 `json:"observedGeneration,omitempty"`
	meta.ReconcileRequestStatus `json:",inline"`
	Conditions                  []v1.ConditionApplyConfiguration `json:"conditions,omitempty"`
	LastAppliedRevision         *string                          `json:"lastAppliedRevision,omitempty"`
	LastAttemptedRevision       *string                          `json:"lastAttemptedRevision,omitempty"`
	HelmRelease                 *string                          `json:"helmRelease,omitempty"`
	HelmReleaseReady            *bool                            `json:"helmReleaseReady,omitempty"`
	HelmRepository              *string                          `json:"helmRepository,omitempty"`
	HelmRepositoryReady         *bool                            `json:"helmRepositoryReady,omitempty"`
	UpgradeFailures             *int64                           `json:"upgradeFailures,omitempty"`
	Failures                    *int64                           `json:"failures,omitempty"`
	InstallFailures             *int64                           `json:"installFailures,omitempty"`
	ManagedDecommissioningNode  *int32                           `json:"decommissioningNode,omitempty"`
}

// RedpandaStatusApplyConfiguration constructs an declarative configuration of the RedpandaStatus type for use with
// apply.
func RedpandaStatus() *RedpandaStatusApplyConfiguration {
	return &RedpandaStatusApplyConfiguration{}
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithObservedGeneration(value int64) *RedpandaStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithLastHandledReconcileAt sets the LastHandledReconcileAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastHandledReconcileAt field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithLastHandledReconcileAt(value string) *RedpandaStatusApplyConfiguration {
	b.LastHandledReconcileAt = value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *RedpandaStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *RedpandaStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithLastAppliedRevision sets the LastAppliedRevision field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastAppliedRevision field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithLastAppliedRevision(value string) *RedpandaStatusApplyConfiguration {
	b.LastAppliedRevision = &value
	return b
}

// WithLastAttemptedRevision sets the LastAttemptedRevision field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastAttemptedRevision field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithLastAttemptedRevision(value string) *RedpandaStatusApplyConfiguration {
	b.LastAttemptedRevision = &value
	return b
}

// WithHelmRelease sets the HelmRelease field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HelmRelease field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithHelmRelease(value string) *RedpandaStatusApplyConfiguration {
	b.HelmRelease = &value
	return b
}

// WithHelmReleaseReady sets the HelmReleaseReady field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HelmReleaseReady field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithHelmReleaseReady(value bool) *RedpandaStatusApplyConfiguration {
	b.HelmReleaseReady = &value
	return b
}

// WithHelmRepository sets the HelmRepository field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HelmRepository field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithHelmRepository(value string) *RedpandaStatusApplyConfiguration {
	b.HelmRepository = &value
	return b
}

// WithHelmRepositoryReady sets the HelmRepositoryReady field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HelmRepositoryReady field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithHelmRepositoryReady(value bool) *RedpandaStatusApplyConfiguration {
	b.HelmRepositoryReady = &value
	return b
}

// WithUpgradeFailures sets the UpgradeFailures field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UpgradeFailures field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithUpgradeFailures(value int64) *RedpandaStatusApplyConfiguration {
	b.UpgradeFailures = &value
	return b
}

// WithFailures sets the Failures field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Failures field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithFailures(value int64) *RedpandaStatusApplyConfiguration {
	b.Failures = &value
	return b
}

// WithInstallFailures sets the InstallFailures field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InstallFailures field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithInstallFailures(value int64) *RedpandaStatusApplyConfiguration {
	b.InstallFailures = &value
	return b
}

// WithManagedDecommissioningNode sets the ManagedDecommissioningNode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ManagedDecommissioningNode field is set to the value of the last call.
func (b *RedpandaStatusApplyConfiguration) WithManagedDecommissioningNode(value int32) *RedpandaStatusApplyConfiguration {
	b.ManagedDecommissioningNode = &value
	return b
}
