// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// LoggingApplyConfiguration represents an declarative configuration of the Logging type for use
// with apply.
type LoggingApplyConfiguration struct {
	LogLevel   *string                       `json:"logLevel,omitempty"`
	UsageStats *UsageStatsApplyConfiguration `json:"usageStats,omitempty"`
}

// LoggingApplyConfiguration constructs an declarative configuration of the Logging type for use with
// apply.
func Logging() *LoggingApplyConfiguration {
	return &LoggingApplyConfiguration{}
}

// WithLogLevel sets the LogLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LogLevel field is set to the value of the last call.
func (b *LoggingApplyConfiguration) WithLogLevel(value string) *LoggingApplyConfiguration {
	b.LogLevel = &value
	return b
}

// WithUsageStats sets the UsageStats field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UsageStats field is set to the value of the last call.
func (b *LoggingApplyConfiguration) WithUsageStats(value *UsageStatsApplyConfiguration) *LoggingApplyConfiguration {
	b.UsageStats = value
	return b
}
