// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha1 "github.com/redpanda-data/redpanda-operator/operator/api/vectorized/v1alpha1"
)

// MigrationApplyConfiguration represents an declarative configuration of the Migration type for use
// with apply.
type MigrationApplyConfiguration struct {
	Enabled    *bool                      `json:"enabled,omitempty"`
	ClusterRef *v1alpha1.NamespaceNameRef `json:"clusterRef,omitempty"`
	ConsoleRef *v1alpha1.NamespaceNameRef `json:"consoleRef,omitempty"`
}

// MigrationApplyConfiguration constructs an declarative configuration of the Migration type for use with
// apply.
func Migration() *MigrationApplyConfiguration {
	return &MigrationApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *MigrationApplyConfiguration) WithEnabled(value bool) *MigrationApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithClusterRef sets the ClusterRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterRef field is set to the value of the last call.
func (b *MigrationApplyConfiguration) WithClusterRef(value v1alpha1.NamespaceNameRef) *MigrationApplyConfiguration {
	b.ClusterRef = &value
	return b
}

// WithConsoleRef sets the ConsoleRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConsoleRef field is set to the value of the last call.
func (b *MigrationApplyConfiguration) WithConsoleRef(value v1alpha1.NamespaceNameRef) *MigrationApplyConfiguration {
	b.ConsoleRef = &value
	return b
}
