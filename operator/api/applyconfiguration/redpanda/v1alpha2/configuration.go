// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// ConfigurationApplyConfiguration represents an declarative configuration of the Configuration type for use
// with apply.
type ConfigurationApplyConfiguration struct {
	Name           *string                            `json:"name,omitempty"`
	Value          *string                            `json:"value,omitempty"`
	ReadOnly       *bool                              `json:"readOnly,omitempty"`
	IsDefault      *bool                              `json:"isDefault,omitempty"`
	Source         *string                            `json:"source,omitempty"`
	IsSensitive    *bool                              `json:"isSensitive,omitempty"`
	ConfigSynonyms []ConfigSynonymsApplyConfiguration `json:"configSynonyms,omitempty"`
	ConfigType     *string                            `json:"configType,omitempty"`
	Documentation  *string                            `json:"documentation,omitempty"`
	UnknownTags    map[string]string                  `json:"unknownTags,omitempty"`
}

// ConfigurationApplyConfiguration constructs an declarative configuration of the Configuration type for use with
// apply.
func Configuration() *ConfigurationApplyConfiguration {
	return &ConfigurationApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ConfigurationApplyConfiguration) WithName(value string) *ConfigurationApplyConfiguration {
	b.Name = &value
	return b
}

// WithValue sets the Value field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Value field is set to the value of the last call.
func (b *ConfigurationApplyConfiguration) WithValue(value string) *ConfigurationApplyConfiguration {
	b.Value = &value
	return b
}

// WithReadOnly sets the ReadOnly field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReadOnly field is set to the value of the last call.
func (b *ConfigurationApplyConfiguration) WithReadOnly(value bool) *ConfigurationApplyConfiguration {
	b.ReadOnly = &value
	return b
}

// WithIsDefault sets the IsDefault field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IsDefault field is set to the value of the last call.
func (b *ConfigurationApplyConfiguration) WithIsDefault(value bool) *ConfigurationApplyConfiguration {
	b.IsDefault = &value
	return b
}

// WithSource sets the Source field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Source field is set to the value of the last call.
func (b *ConfigurationApplyConfiguration) WithSource(value string) *ConfigurationApplyConfiguration {
	b.Source = &value
	return b
}

// WithIsSensitive sets the IsSensitive field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IsSensitive field is set to the value of the last call.
func (b *ConfigurationApplyConfiguration) WithIsSensitive(value bool) *ConfigurationApplyConfiguration {
	b.IsSensitive = &value
	return b
}

// WithConfigSynonyms adds the given value to the ConfigSynonyms field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ConfigSynonyms field.
func (b *ConfigurationApplyConfiguration) WithConfigSynonyms(values ...*ConfigSynonymsApplyConfiguration) *ConfigurationApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConfigSynonyms")
		}
		b.ConfigSynonyms = append(b.ConfigSynonyms, *values[i])
	}
	return b
}

// WithConfigType sets the ConfigType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigType field is set to the value of the last call.
func (b *ConfigurationApplyConfiguration) WithConfigType(value string) *ConfigurationApplyConfiguration {
	b.ConfigType = &value
	return b
}

// WithDocumentation sets the Documentation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Documentation field is set to the value of the last call.
func (b *ConfigurationApplyConfiguration) WithDocumentation(value string) *ConfigurationApplyConfiguration {
	b.Documentation = &value
	return b
}

// WithUnknownTags puts the entries into the UnknownTags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the UnknownTags field,
// overwriting an existing map entries in UnknownTags field with the same key.
func (b *ConfigurationApplyConfiguration) WithUnknownTags(entries map[string]string) *ConfigurationApplyConfiguration {
	if b.UnknownTags == nil && len(entries) > 0 {
		b.UnknownTags = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.UnknownTags[k] = v
	}
	return b
}
