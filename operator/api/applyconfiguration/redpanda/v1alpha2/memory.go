// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// MemoryApplyConfiguration represents an declarative configuration of the Memory type for use
// with apply.
type MemoryApplyConfiguration struct {
	Container           *ContainerResourcesApplyConfiguration `json:"container,omitempty"`
	EnableMemoryLocking *bool                                 `json:"enable_memory_locking,omitempty"`
	Redpanda            *RedpandaMemoryApplyConfiguration     `json:"redpanda,omitempty"`
}

// MemoryApplyConfiguration constructs an declarative configuration of the Memory type for use with
// apply.
func Memory() *MemoryApplyConfiguration {
	return &MemoryApplyConfiguration{}
}

// WithContainer sets the Container field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Container field is set to the value of the last call.
func (b *MemoryApplyConfiguration) WithContainer(value *ContainerResourcesApplyConfiguration) *MemoryApplyConfiguration {
	b.Container = value
	return b
}

// WithEnableMemoryLocking sets the EnableMemoryLocking field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableMemoryLocking field is set to the value of the last call.
func (b *MemoryApplyConfiguration) WithEnableMemoryLocking(value bool) *MemoryApplyConfiguration {
	b.EnableMemoryLocking = &value
	return b
}

// WithRedpanda sets the Redpanda field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Redpanda field is set to the value of the last call.
func (b *MemoryApplyConfiguration) WithRedpanda(value *RedpandaMemoryApplyConfiguration) *MemoryApplyConfiguration {
	b.Redpanda = value
	return b
}
