// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/api/core/v1"
)

// PostInstallJobApplyConfiguration represents an declarative configuration of the PostInstallJob type for use
// with apply.
type PostInstallJobApplyConfiguration struct {
	Resources       *v1.ResourceRequirements       `json:"resources,omitempty"`
	Annotations     map[string]string              `json:"annotations,omitempty"`
	Enabled         *bool                          `json:"enabled,omitempty"`
	Labels          map[string]string              `json:"labels,omitempty"`
	Affinity        *v1.Affinity                   `json:"affinity,omitempty"`
	SecurityContext *v1.SecurityContext            `json:"securityContext,omitempty"`
	PodTemplate     *PodTemplateApplyConfiguration `json:"podTemplate,omitempty"`
}

// PostInstallJobApplyConfiguration constructs an declarative configuration of the PostInstallJob type for use with
// apply.
func PostInstallJob() *PostInstallJobApplyConfiguration {
	return &PostInstallJobApplyConfiguration{}
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *PostInstallJobApplyConfiguration) WithResources(value v1.ResourceRequirements) *PostInstallJobApplyConfiguration {
	b.Resources = &value
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *PostInstallJobApplyConfiguration) WithAnnotations(entries map[string]string) *PostInstallJobApplyConfiguration {
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *PostInstallJobApplyConfiguration) WithEnabled(value bool) *PostInstallJobApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *PostInstallJobApplyConfiguration) WithLabels(entries map[string]string) *PostInstallJobApplyConfiguration {
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *PostInstallJobApplyConfiguration) WithAffinity(value v1.Affinity) *PostInstallJobApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *PostInstallJobApplyConfiguration) WithSecurityContext(value v1.SecurityContext) *PostInstallJobApplyConfiguration {
	b.SecurityContext = &value
	return b
}

// WithPodTemplate sets the PodTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PodTemplate field is set to the value of the last call.
func (b *PostInstallJobApplyConfiguration) WithPodTemplate(value *PodTemplateApplyConfiguration) *PostInstallJobApplyConfiguration {
	b.PodTemplate = value
	return b
}
