// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// SchemaRuleSetApplyConfiguration represents an declarative configuration of the SchemaRuleSet type for use
// with apply.
type SchemaRuleSetApplyConfiguration struct {
	MigrationRules []SchemaRuleApplyConfiguration `json:"migrationRules,omitempty"`
	DomainRules    []SchemaRuleApplyConfiguration `json:"domainRules,omitempty"`
}

// SchemaRuleSetApplyConfiguration constructs an declarative configuration of the SchemaRuleSet type for use with
// apply.
func SchemaRuleSet() *SchemaRuleSetApplyConfiguration {
	return &SchemaRuleSetApplyConfiguration{}
}

// WithMigrationRules adds the given value to the MigrationRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the MigrationRules field.
func (b *SchemaRuleSetApplyConfiguration) WithMigrationRules(values ...*SchemaRuleApplyConfiguration) *SchemaRuleSetApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithMigrationRules")
		}
		b.MigrationRules = append(b.MigrationRules, *values[i])
	}
	return b
}

// WithDomainRules adds the given value to the DomainRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DomainRules field.
func (b *SchemaRuleSetApplyConfiguration) WithDomainRules(values ...*SchemaRuleApplyConfiguration) *SchemaRuleSetApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDomainRules")
		}
		b.DomainRules = append(b.DomainRules, *values[i])
	}
	return b
}
