// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// CPUApplyConfiguration represents an declarative configuration of the CPU type for use
// with apply.
type CPUApplyConfiguration struct {
	Cores           *resource.Quantity `json:"cores,omitempty"`
	Overprovisioned *bool              `json:"overprovisioned,omitempty"`
}

// CPUApplyConfiguration constructs an declarative configuration of the CPU type for use with
// apply.
func CPU() *CPUApplyConfiguration {
	return &CPUApplyConfiguration{}
}

// WithCores sets the Cores field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cores field is set to the value of the last call.
func (b *CPUApplyConfiguration) WithCores(value resource.Quantity) *CPUApplyConfiguration {
	b.Cores = &value
	return b
}

// WithOverprovisioned sets the Overprovisioned field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Overprovisioned field is set to the value of the last call.
func (b *CPUApplyConfiguration) WithOverprovisioned(value bool) *CPUApplyConfiguration {
	b.Overprovisioned = &value
	return b
}
