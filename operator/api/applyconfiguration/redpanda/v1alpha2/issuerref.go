// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// IssuerRefApplyConfiguration represents an declarative configuration of the IssuerRef type for use
// with apply.
type IssuerRefApplyConfiguration struct {
	Name  *string `json:"name,omitempty"`
	Kind  *string `json:"kind,omitempty"`
	Group *string `json:"group,omitempty"`
}

// IssuerRefApplyConfiguration constructs an declarative configuration of the IssuerRef type for use with
// apply.
func IssuerRef() *IssuerRefApplyConfiguration {
	return &IssuerRefApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *IssuerRefApplyConfiguration) WithName(value string) *IssuerRefApplyConfiguration {
	b.Name = &value
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *IssuerRefApplyConfiguration) WithKind(value string) *IssuerRefApplyConfiguration {
	b.Kind = &value
	return b
}

// WithGroup sets the Group field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Group field is set to the value of the last call.
func (b *IssuerRefApplyConfiguration) WithGroup(value string) *IssuerRefApplyConfiguration {
	b.Group = &value
	return b
}
