// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/api/core/v1"
)

// RedpandaClusterSpecApplyConfiguration represents an declarative configuration of the RedpandaClusterSpec type for use
// with apply.
type RedpandaClusterSpecApplyConfiguration struct {
	NameOverride               *string                               `json:"nameOverride,omitempty"`
	DeprecatedFullNameOverride *string                               `json:"fullNameOverride,omitempty"`
	FullnameOverride           *string                               `json:"fullnameOverride,omitempty"`
	ClusterDomain              *string                               `json:"clusterDomain,omitempty"`
	CommonLabels               map[string]string                     `json:"commonLabels,omitempty"`
	NodeSelector               map[string]string                     `json:"nodeSelector,omitempty"`
	Tolerations                []v1.Toleration                       `json:"tolerations,omitempty"`
	Image                      *RedpandaImageApplyConfiguration      `json:"image,omitempty"`
	ImagePullSecrets           []v1.LocalObjectReference             `json:"imagePullSecrets,omitempty"`
	LicenseKey                 *string                               `json:"license_key,omitempty"`
	LicenseSecretRef           *LicenseSecretRefApplyConfiguration   `json:"license_secret_ref,omitempty"`
	Enterprise                 *EnterpriseApplyConfiguration         `json:"enterprise,omitempty"`
	RackAwareness              *RackAwarenessApplyConfiguration      `json:"rackAwareness,omitempty"`
	Console                    *RedpandaConsoleApplyConfiguration    `json:"console,omitempty"`
	Connectors                 *RedpandaConnectorsApplyConfiguration `json:"connectors,omitempty"`
	Auth                       *AuthApplyConfiguration               `json:"auth,omitempty"`
	TLS                        *TLSApplyConfiguration                `json:"tls,omitempty"`
	External                   *ExternalApplyConfiguration           `json:"external,omitempty"`
	Logging                    *LoggingApplyConfiguration            `json:"logging,omitempty"`
	AuditLogging               *AuditLoggingApplyConfiguration       `json:"auditLogging,omitempty"`
	Resources                  *ResourcesApplyConfiguration          `json:"resources,omitempty"`
	Service                    *ServiceApplyConfiguration            `json:"service,omitempty"`
	Storage                    *StorageApplyConfiguration            `json:"storage,omitempty"`
	PostInstallJob             *PostInstallJobApplyConfiguration     `json:"post_install_job,omitempty"`
	PostUpgradeJob             *PostUpgradeJobApplyConfiguration     `json:"post_upgrade_job,omitempty"`
	Statefulset                *StatefulsetApplyConfiguration        `json:"statefulset,omitempty"`
	Tuning                     *TuningApplyConfiguration             `json:"tuning,omitempty"`
	Listeners                  *ListenersApplyConfiguration          `json:"listeners,omitempty"`
	Config                     *ConfigApplyConfiguration             `json:"config,omitempty"`
	RBAC                       *RBACApplyConfiguration               `json:"rbac,omitempty"`
	ServiceAccount             *ServiceAccountApplyConfiguration     `json:"serviceAccount,omitempty"`
	Monitoring                 *MonitoringApplyConfiguration         `json:"monitoring,omitempty"`
	Force                      *bool                                 `json:"force,omitempty"`
	Affinity                   *v1.Affinity                          `json:"affinity,omitempty"`
	Tests                      *EnablableApplyConfiguration          `json:"tests,omitempty"`
}

// RedpandaClusterSpecApplyConfiguration constructs an declarative configuration of the RedpandaClusterSpec type for use with
// apply.
func RedpandaClusterSpec() *RedpandaClusterSpecApplyConfiguration {
	return &RedpandaClusterSpecApplyConfiguration{}
}

// WithNameOverride sets the NameOverride field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NameOverride field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithNameOverride(value string) *RedpandaClusterSpecApplyConfiguration {
	b.NameOverride = &value
	return b
}

// WithDeprecatedFullNameOverride sets the DeprecatedFullNameOverride field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeprecatedFullNameOverride field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithDeprecatedFullNameOverride(value string) *RedpandaClusterSpecApplyConfiguration {
	b.DeprecatedFullNameOverride = &value
	return b
}

// WithFullnameOverride sets the FullnameOverride field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FullnameOverride field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithFullnameOverride(value string) *RedpandaClusterSpecApplyConfiguration {
	b.FullnameOverride = &value
	return b
}

// WithClusterDomain sets the ClusterDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterDomain field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithClusterDomain(value string) *RedpandaClusterSpecApplyConfiguration {
	b.ClusterDomain = &value
	return b
}

// WithCommonLabels puts the entries into the CommonLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the CommonLabels field,
// overwriting an existing map entries in CommonLabels field with the same key.
func (b *RedpandaClusterSpecApplyConfiguration) WithCommonLabels(entries map[string]string) *RedpandaClusterSpecApplyConfiguration {
	if b.CommonLabels == nil && len(entries) > 0 {
		b.CommonLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.CommonLabels[k] = v
	}
	return b
}

// WithNodeSelector puts the entries into the NodeSelector field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the NodeSelector field,
// overwriting an existing map entries in NodeSelector field with the same key.
func (b *RedpandaClusterSpecApplyConfiguration) WithNodeSelector(entries map[string]string) *RedpandaClusterSpecApplyConfiguration {
	if b.NodeSelector == nil && len(entries) > 0 {
		b.NodeSelector = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.NodeSelector[k] = v
	}
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *RedpandaClusterSpecApplyConfiguration) WithTolerations(values ...v1.Toleration) *RedpandaClusterSpecApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithImage(value *RedpandaImageApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Image = value
	return b
}

// WithImagePullSecrets adds the given value to the ImagePullSecrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImagePullSecrets field.
func (b *RedpandaClusterSpecApplyConfiguration) WithImagePullSecrets(values ...v1.LocalObjectReference) *RedpandaClusterSpecApplyConfiguration {
	for i := range values {
		b.ImagePullSecrets = append(b.ImagePullSecrets, values[i])
	}
	return b
}

// WithLicenseKey sets the LicenseKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LicenseKey field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithLicenseKey(value string) *RedpandaClusterSpecApplyConfiguration {
	b.LicenseKey = &value
	return b
}

// WithLicenseSecretRef sets the LicenseSecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LicenseSecretRef field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithLicenseSecretRef(value *LicenseSecretRefApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.LicenseSecretRef = value
	return b
}

// WithEnterprise sets the Enterprise field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enterprise field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithEnterprise(value *EnterpriseApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Enterprise = value
	return b
}

// WithRackAwareness sets the RackAwareness field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RackAwareness field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithRackAwareness(value *RackAwarenessApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.RackAwareness = value
	return b
}

// WithConsole sets the Console field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Console field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithConsole(value *RedpandaConsoleApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Console = value
	return b
}

// WithConnectors sets the Connectors field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Connectors field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithConnectors(value *RedpandaConnectorsApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Connectors = value
	return b
}

// WithAuth sets the Auth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Auth field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithAuth(value *AuthApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Auth = value
	return b
}

// WithTLS sets the TLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLS field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithTLS(value *TLSApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.TLS = value
	return b
}

// WithExternal sets the External field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the External field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithExternal(value *ExternalApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.External = value
	return b
}

// WithLogging sets the Logging field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Logging field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithLogging(value *LoggingApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Logging = value
	return b
}

// WithAuditLogging sets the AuditLogging field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AuditLogging field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithAuditLogging(value *AuditLoggingApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.AuditLogging = value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithResources(value *ResourcesApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Resources = value
	return b
}

// WithService sets the Service field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Service field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithService(value *ServiceApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Service = value
	return b
}

// WithStorage sets the Storage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Storage field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithStorage(value *StorageApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Storage = value
	return b
}

// WithPostInstallJob sets the PostInstallJob field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PostInstallJob field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithPostInstallJob(value *PostInstallJobApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.PostInstallJob = value
	return b
}

// WithPostUpgradeJob sets the PostUpgradeJob field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PostUpgradeJob field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithPostUpgradeJob(value *PostUpgradeJobApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.PostUpgradeJob = value
	return b
}

// WithStatefulset sets the Statefulset field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Statefulset field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithStatefulset(value *StatefulsetApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Statefulset = value
	return b
}

// WithTuning sets the Tuning field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tuning field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithTuning(value *TuningApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Tuning = value
	return b
}

// WithListeners sets the Listeners field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Listeners field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithListeners(value *ListenersApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Listeners = value
	return b
}

// WithConfig sets the Config field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Config field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithConfig(value *ConfigApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Config = value
	return b
}

// WithRBAC sets the RBAC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RBAC field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithRBAC(value *RBACApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.RBAC = value
	return b
}

// WithServiceAccount sets the ServiceAccount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccount field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithServiceAccount(value *ServiceAccountApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.ServiceAccount = value
	return b
}

// WithMonitoring sets the Monitoring field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Monitoring field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithMonitoring(value *MonitoringApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Monitoring = value
	return b
}

// WithForce sets the Force field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Force field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithForce(value bool) *RedpandaClusterSpecApplyConfiguration {
	b.Force = &value
	return b
}

// WithAffinity sets the Affinity field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Affinity field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithAffinity(value v1.Affinity) *RedpandaClusterSpecApplyConfiguration {
	b.Affinity = &value
	return b
}

// WithTests sets the Tests field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tests field is set to the value of the last call.
func (b *RedpandaClusterSpecApplyConfiguration) WithTests(value *EnablableApplyConfiguration) *RedpandaClusterSpecApplyConfiguration {
	b.Tests = value
	return b
}
