// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// InitContainersApplyConfiguration represents an declarative configuration of the InitContainers type for use
// with apply.
type InitContainersApplyConfiguration struct {
	Configurator                      *ConfiguratorApplyConfiguration                      `json:"configurator,omitempty"`
	ExtraInitContainers               *string                                              `json:"extraInitContainers,omitempty"`
	SetDataDirOwnership               *SetDataDirOwnershipApplyConfiguration               `json:"setDataDirOwnership,omitempty"`
	SetTieredStorageCacheDirOwnership *SetTieredStorageCacheDirOwnershipApplyConfiguration `json:"setTieredStorageCacheDirOwnership,omitempty"`
	FsValidator                       *FsValidatorApplyConfiguration                       `json:"fsValidator,omitempty"`
	Tuning                            *TuningApplyConfiguration                            `json:"tuning,omitempty"`
}

// InitContainersApplyConfiguration constructs an declarative configuration of the InitContainers type for use with
// apply.
func InitContainers() *InitContainersApplyConfiguration {
	return &InitContainersApplyConfiguration{}
}

// WithConfigurator sets the Configurator field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Configurator field is set to the value of the last call.
func (b *InitContainersApplyConfiguration) WithConfigurator(value *ConfiguratorApplyConfiguration) *InitContainersApplyConfiguration {
	b.Configurator = value
	return b
}

// WithExtraInitContainers sets the ExtraInitContainers field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExtraInitContainers field is set to the value of the last call.
func (b *InitContainersApplyConfiguration) WithExtraInitContainers(value string) *InitContainersApplyConfiguration {
	b.ExtraInitContainers = &value
	return b
}

// WithSetDataDirOwnership sets the SetDataDirOwnership field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SetDataDirOwnership field is set to the value of the last call.
func (b *InitContainersApplyConfiguration) WithSetDataDirOwnership(value *SetDataDirOwnershipApplyConfiguration) *InitContainersApplyConfiguration {
	b.SetDataDirOwnership = value
	return b
}

// WithSetTieredStorageCacheDirOwnership sets the SetTieredStorageCacheDirOwnership field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SetTieredStorageCacheDirOwnership field is set to the value of the last call.
func (b *InitContainersApplyConfiguration) WithSetTieredStorageCacheDirOwnership(value *SetTieredStorageCacheDirOwnershipApplyConfiguration) *InitContainersApplyConfiguration {
	b.SetTieredStorageCacheDirOwnership = value
	return b
}

// WithFsValidator sets the FsValidator field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FsValidator field is set to the value of the last call.
func (b *InitContainersApplyConfiguration) WithFsValidator(value *FsValidatorApplyConfiguration) *InitContainersApplyConfiguration {
	b.FsValidator = value
	return b
}

// WithTuning sets the Tuning field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Tuning field is set to the value of the last call.
func (b *InitContainersApplyConfiguration) WithTuning(value *TuningApplyConfiguration) *InitContainersApplyConfiguration {
	b.Tuning = value
	return b
}
