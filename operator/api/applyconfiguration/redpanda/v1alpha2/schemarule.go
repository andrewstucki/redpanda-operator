// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1alpha2 "github.com/redpanda-data/redpanda-operator/operator/api/redpanda/v1alpha2"
)

// SchemaRuleApplyConfiguration represents an declarative configuration of the SchemaRule type for use
// with apply.
type SchemaRuleApplyConfiguration struct {
	Name      *string                  `json:"name,omitempty"`
	Doc       *string                  `json:"doc,omitempty"`
	Kind      *v1alpha2.SchemaRuleKind `json:"kind,omitempty"`
	Mode      *v1alpha2.SchemaRuleMode `json:"mode,omitempty"`
	Type      *string                  `json:"type,omitempty"`
	Tags      []string                 `json:"tags,omitempty"`
	Params    map[string]string        `json:"params,omitempty"`
	Expr      *string                  `json:"expr,omitempty"`
	OnSuccess *string                  `json:"onSuccess,omitempty"`
	OnFailure *string                  `json:"onFailure,omitempty"`
	Disabled  *bool                    `json:"disabled,omitempty"`
}

// SchemaRuleApplyConfiguration constructs an declarative configuration of the SchemaRule type for use with
// apply.
func SchemaRule() *SchemaRuleApplyConfiguration {
	return &SchemaRuleApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *SchemaRuleApplyConfiguration) WithName(value string) *SchemaRuleApplyConfiguration {
	b.Name = &value
	return b
}

// WithDoc sets the Doc field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Doc field is set to the value of the last call.
func (b *SchemaRuleApplyConfiguration) WithDoc(value string) *SchemaRuleApplyConfiguration {
	b.Doc = &value
	return b
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *SchemaRuleApplyConfiguration) WithKind(value v1alpha2.SchemaRuleKind) *SchemaRuleApplyConfiguration {
	b.Kind = &value
	return b
}

// WithMode sets the Mode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mode field is set to the value of the last call.
func (b *SchemaRuleApplyConfiguration) WithMode(value v1alpha2.SchemaRuleMode) *SchemaRuleApplyConfiguration {
	b.Mode = &value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *SchemaRuleApplyConfiguration) WithType(value string) *SchemaRuleApplyConfiguration {
	b.Type = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *SchemaRuleApplyConfiguration) WithTags(values ...string) *SchemaRuleApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// WithParams puts the entries into the Params field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Params field,
// overwriting an existing map entries in Params field with the same key.
func (b *SchemaRuleApplyConfiguration) WithParams(entries map[string]string) *SchemaRuleApplyConfiguration {
	if b.Params == nil && len(entries) > 0 {
		b.Params = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Params[k] = v
	}
	return b
}

// WithExpr sets the Expr field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Expr field is set to the value of the last call.
func (b *SchemaRuleApplyConfiguration) WithExpr(value string) *SchemaRuleApplyConfiguration {
	b.Expr = &value
	return b
}

// WithOnSuccess sets the OnSuccess field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OnSuccess field is set to the value of the last call.
func (b *SchemaRuleApplyConfiguration) WithOnSuccess(value string) *SchemaRuleApplyConfiguration {
	b.OnSuccess = &value
	return b
}

// WithOnFailure sets the OnFailure field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OnFailure field is set to the value of the last call.
func (b *SchemaRuleApplyConfiguration) WithOnFailure(value string) *SchemaRuleApplyConfiguration {
	b.OnFailure = &value
	return b
}

// WithDisabled sets the Disabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Disabled field is set to the value of the last call.
func (b *SchemaRuleApplyConfiguration) WithDisabled(value bool) *SchemaRuleApplyConfiguration {
	b.Disabled = &value
	return b
}
