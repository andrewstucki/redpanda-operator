// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// ListenersApplyConfiguration represents an declarative configuration of the Listeners type for use
// with apply.
type ListenersApplyConfiguration struct {
	Admin          *AdminApplyConfiguration          `json:"admin,omitempty"`
	HTTP           *HTTPApplyConfiguration           `json:"http,omitempty"`
	Kafka          *KafkaApplyConfiguration          `json:"kafka,omitempty"`
	RPC            *RPCApplyConfiguration            `json:"rpc,omitempty"`
	SchemaRegistry *SchemaRegistryApplyConfiguration `json:"schemaRegistry,omitempty"`
}

// ListenersApplyConfiguration constructs an declarative configuration of the Listeners type for use with
// apply.
func Listeners() *ListenersApplyConfiguration {
	return &ListenersApplyConfiguration{}
}

// WithAdmin sets the Admin field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Admin field is set to the value of the last call.
func (b *ListenersApplyConfiguration) WithAdmin(value *AdminApplyConfiguration) *ListenersApplyConfiguration {
	b.Admin = value
	return b
}

// WithHTTP sets the HTTP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HTTP field is set to the value of the last call.
func (b *ListenersApplyConfiguration) WithHTTP(value *HTTPApplyConfiguration) *ListenersApplyConfiguration {
	b.HTTP = value
	return b
}

// WithKafka sets the Kafka field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kafka field is set to the value of the last call.
func (b *ListenersApplyConfiguration) WithKafka(value *KafkaApplyConfiguration) *ListenersApplyConfiguration {
	b.Kafka = value
	return b
}

// WithRPC sets the RPC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RPC field is set to the value of the last call.
func (b *ListenersApplyConfiguration) WithRPC(value *RPCApplyConfiguration) *ListenersApplyConfiguration {
	b.RPC = value
	return b
}

// WithSchemaRegistry sets the SchemaRegistry field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SchemaRegistry field is set to the value of the last call.
func (b *ListenersApplyConfiguration) WithSchemaRegistry(value *SchemaRegistryApplyConfiguration) *ListenersApplyConfiguration {
	b.SchemaRegistry = value
	return b
}
