// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// ConfigSynonymsApplyConfiguration represents an declarative configuration of the ConfigSynonyms type for use
// with apply.
type ConfigSynonymsApplyConfiguration struct {
	Name        *string           `json:"name,omitempty"`
	Value       *string           `json:"value,omitempty"`
	Source      *string           `json:"source,omitempty"`
	UnknownTags map[string]string `json:"unknownTags,omitempty"`
}

// ConfigSynonymsApplyConfiguration constructs an declarative configuration of the ConfigSynonyms type for use with
// apply.
func ConfigSynonyms() *ConfigSynonymsApplyConfiguration {
	return &ConfigSynonymsApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *ConfigSynonymsApplyConfiguration) WithName(value string) *ConfigSynonymsApplyConfiguration {
	b.Name = &value
	return b
}

// WithValue sets the Value field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Value field is set to the value of the last call.
func (b *ConfigSynonymsApplyConfiguration) WithValue(value string) *ConfigSynonymsApplyConfiguration {
	b.Value = &value
	return b
}

// WithSource sets the Source field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Source field is set to the value of the last call.
func (b *ConfigSynonymsApplyConfiguration) WithSource(value string) *ConfigSynonymsApplyConfiguration {
	b.Source = &value
	return b
}

// WithUnknownTags puts the entries into the UnknownTags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the UnknownTags field,
// overwriting an existing map entries in UnknownTags field with the same key.
func (b *ConfigSynonymsApplyConfiguration) WithUnknownTags(entries map[string]string) *ConfigSynonymsApplyConfiguration {
	if b.UnknownTags == nil && len(entries) > 0 {
		b.UnknownTags = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.UnknownTags[k] = v
	}
	return b
}
