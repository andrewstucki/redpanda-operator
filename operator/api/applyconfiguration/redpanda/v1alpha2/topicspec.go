// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// TopicSpecApplyConfiguration represents an declarative configuration of the TopicSpec type for use
// with apply.
type TopicSpecApplyConfiguration struct {
	Partitions              *int                             `json:"partitions,omitempty"`
	ReplicationFactor       *int                             `json:"replicationFactor,omitempty"`
	OverwriteTopicName      *string                          `json:"overwriteTopicName,omitempty"`
	AdditionalConfig        map[string]*string               `json:"additionalConfig,omitempty"`
	ClusterSource           *ClusterSourceApplyConfiguration `json:"cluster,omitempty"`
	KafkaAPISpec            *KafkaAPISpecApplyConfiguration  `json:"kafkaApiSpec,omitempty"`
	MetricsNamespace        *string                          `json:"metricsNamespace,omitempty"`
	SynchronizationInterval *v1.Duration                     `json:"interval,omitempty"`
}

// TopicSpecApplyConfiguration constructs an declarative configuration of the TopicSpec type for use with
// apply.
func TopicSpec() *TopicSpecApplyConfiguration {
	return &TopicSpecApplyConfiguration{}
}

// WithPartitions sets the Partitions field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Partitions field is set to the value of the last call.
func (b *TopicSpecApplyConfiguration) WithPartitions(value int) *TopicSpecApplyConfiguration {
	b.Partitions = &value
	return b
}

// WithReplicationFactor sets the ReplicationFactor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReplicationFactor field is set to the value of the last call.
func (b *TopicSpecApplyConfiguration) WithReplicationFactor(value int) *TopicSpecApplyConfiguration {
	b.ReplicationFactor = &value
	return b
}

// WithOverwriteTopicName sets the OverwriteTopicName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OverwriteTopicName field is set to the value of the last call.
func (b *TopicSpecApplyConfiguration) WithOverwriteTopicName(value string) *TopicSpecApplyConfiguration {
	b.OverwriteTopicName = &value
	return b
}

// WithAdditionalConfig puts the entries into the AdditionalConfig field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AdditionalConfig field,
// overwriting an existing map entries in AdditionalConfig field with the same key.
func (b *TopicSpecApplyConfiguration) WithAdditionalConfig(entries map[string]*string) *TopicSpecApplyConfiguration {
	if b.AdditionalConfig == nil && len(entries) > 0 {
		b.AdditionalConfig = make(map[string]*string, len(entries))
	}
	for k, v := range entries {
		b.AdditionalConfig[k] = v
	}
	return b
}

// WithClusterSource sets the ClusterSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterSource field is set to the value of the last call.
func (b *TopicSpecApplyConfiguration) WithClusterSource(value *ClusterSourceApplyConfiguration) *TopicSpecApplyConfiguration {
	b.ClusterSource = value
	return b
}

// WithKafkaAPISpec sets the KafkaAPISpec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the KafkaAPISpec field is set to the value of the last call.
func (b *TopicSpecApplyConfiguration) WithKafkaAPISpec(value *KafkaAPISpecApplyConfiguration) *TopicSpecApplyConfiguration {
	b.KafkaAPISpec = value
	return b
}

// WithMetricsNamespace sets the MetricsNamespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MetricsNamespace field is set to the value of the last call.
func (b *TopicSpecApplyConfiguration) WithMetricsNamespace(value string) *TopicSpecApplyConfiguration {
	b.MetricsNamespace = &value
	return b
}

// WithSynchronizationInterval sets the SynchronizationInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SynchronizationInterval field is set to the value of the last call.
func (b *TopicSpecApplyConfiguration) WithSynchronizationInterval(value v1.Duration) *TopicSpecApplyConfiguration {
	b.SynchronizationInterval = &value
	return b
}
