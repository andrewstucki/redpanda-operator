// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/api/core/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// RedpandaConnectorsApplyConfiguration represents an declarative configuration of the RedpandaConnectors type for use
// with apply.
type RedpandaConnectorsApplyConfiguration struct {
	Enabled          *bool                                  `json:"enabled,omitempty"`
	Test             *ConnectorsCreateObjApplyConfiguration `json:"test,omitempty"`
	Monitoring       *ConnectorMonitoringApplyConfiguration `json:"monitoring,omitempty"`
	Connectors       *runtime.RawExtension                  `json:"connectors,omitempty"`
	Deployment       *runtime.RawExtension                  `json:"deployment,omitempty"`
	NameOverride     *string                                `json:"nameOverride,omitempty"`
	FullNameOverride *string                                `json:"fullnameOverride,omitempty"`
	CommonLabels     map[string]string                      `json:"commonLabels,omitempty"`
	Tolerations      []v1.Toleration                        `json:"tolerations,omitempty"`
	Image            *RedpandaImageApplyConfiguration       `json:"image,omitempty"`
	ImagePullSecrets []v1.LocalObjectReference              `json:"imagePullSecrets,omitempty"`
	Auth             *runtime.RawExtension                  `json:"auth,omitempty"`
	Container        *runtime.RawExtension                  `json:"container,omitempty"`
	Storage          *runtime.RawExtension                  `json:"storage,omitempty"`
	Logging          *runtime.RawExtension                  `json:"logging,omitempty"`
	Service          *runtime.RawExtension                  `json:"service,omitempty"`
	ServiceAccount   *runtime.RawExtension                  `json:"serviceAccount,omitempty"`
}

// RedpandaConnectorsApplyConfiguration constructs an declarative configuration of the RedpandaConnectors type for use with
// apply.
func RedpandaConnectors() *RedpandaConnectorsApplyConfiguration {
	return &RedpandaConnectorsApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithEnabled(value bool) *RedpandaConnectorsApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithTest sets the Test field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Test field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithTest(value *ConnectorsCreateObjApplyConfiguration) *RedpandaConnectorsApplyConfiguration {
	b.Test = value
	return b
}

// WithMonitoring sets the Monitoring field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Monitoring field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithMonitoring(value *ConnectorMonitoringApplyConfiguration) *RedpandaConnectorsApplyConfiguration {
	b.Monitoring = value
	return b
}

// WithConnectors sets the Connectors field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Connectors field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithConnectors(value runtime.RawExtension) *RedpandaConnectorsApplyConfiguration {
	b.Connectors = &value
	return b
}

// WithDeployment sets the Deployment field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Deployment field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithDeployment(value runtime.RawExtension) *RedpandaConnectorsApplyConfiguration {
	b.Deployment = &value
	return b
}

// WithNameOverride sets the NameOverride field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NameOverride field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithNameOverride(value string) *RedpandaConnectorsApplyConfiguration {
	b.NameOverride = &value
	return b
}

// WithFullNameOverride sets the FullNameOverride field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FullNameOverride field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithFullNameOverride(value string) *RedpandaConnectorsApplyConfiguration {
	b.FullNameOverride = &value
	return b
}

// WithCommonLabels puts the entries into the CommonLabels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the CommonLabels field,
// overwriting an existing map entries in CommonLabels field with the same key.
func (b *RedpandaConnectorsApplyConfiguration) WithCommonLabels(entries map[string]string) *RedpandaConnectorsApplyConfiguration {
	if b.CommonLabels == nil && len(entries) > 0 {
		b.CommonLabels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.CommonLabels[k] = v
	}
	return b
}

// WithTolerations adds the given value to the Tolerations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tolerations field.
func (b *RedpandaConnectorsApplyConfiguration) WithTolerations(values ...v1.Toleration) *RedpandaConnectorsApplyConfiguration {
	for i := range values {
		b.Tolerations = append(b.Tolerations, values[i])
	}
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithImage(value *RedpandaImageApplyConfiguration) *RedpandaConnectorsApplyConfiguration {
	b.Image = value
	return b
}

// WithImagePullSecrets adds the given value to the ImagePullSecrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ImagePullSecrets field.
func (b *RedpandaConnectorsApplyConfiguration) WithImagePullSecrets(values ...v1.LocalObjectReference) *RedpandaConnectorsApplyConfiguration {
	for i := range values {
		b.ImagePullSecrets = append(b.ImagePullSecrets, values[i])
	}
	return b
}

// WithAuth sets the Auth field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Auth field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithAuth(value runtime.RawExtension) *RedpandaConnectorsApplyConfiguration {
	b.Auth = &value
	return b
}

// WithContainer sets the Container field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Container field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithContainer(value runtime.RawExtension) *RedpandaConnectorsApplyConfiguration {
	b.Container = &value
	return b
}

// WithStorage sets the Storage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Storage field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithStorage(value runtime.RawExtension) *RedpandaConnectorsApplyConfiguration {
	b.Storage = &value
	return b
}

// WithLogging sets the Logging field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Logging field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithLogging(value runtime.RawExtension) *RedpandaConnectorsApplyConfiguration {
	b.Logging = &value
	return b
}

// WithService sets the Service field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Service field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithService(value runtime.RawExtension) *RedpandaConnectorsApplyConfiguration {
	b.Service = &value
	return b
}

// WithServiceAccount sets the ServiceAccount field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServiceAccount field is set to the value of the last call.
func (b *RedpandaConnectorsApplyConfiguration) WithServiceAccount(value runtime.RawExtension) *RedpandaConnectorsApplyConfiguration {
	b.ServiceAccount = &value
	return b
}
