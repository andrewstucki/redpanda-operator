// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// RPCApplyConfiguration represents an declarative configuration of the RPC type for use
// with apply.
type RPCApplyConfiguration struct {
	Port *int                           `json:"port,omitempty"`
	TLS  *ListenerTLSApplyConfiguration `json:"tls,omitempty"`
}

// RPCApplyConfiguration constructs an declarative configuration of the RPC type for use with
// apply.
func RPC() *RPCApplyConfiguration {
	return &RPCApplyConfiguration{}
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *RPCApplyConfiguration) WithPort(value int) *RPCApplyConfiguration {
	b.Port = &value
	return b
}

// WithTLS sets the TLS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TLS field is set to the value of the last call.
func (b *RPCApplyConfiguration) WithTLS(value *ListenerTLSApplyConfiguration) *RPCApplyConfiguration {
	b.TLS = value
	return b
}
