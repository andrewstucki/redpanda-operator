// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// SchemaMetadataApplyConfiguration represents an declarative configuration of the SchemaMetadata type for use
// with apply.
type SchemaMetadataApplyConfiguration struct {
	Tags       map[string][]string `json:"tags,omitempty"`
	Properties map[string]string   `json:"properties,omitempty"`
	Sensitive  []string            `json:"sensitive,omitempty"`
}

// SchemaMetadataApplyConfiguration constructs an declarative configuration of the SchemaMetadata type for use with
// apply.
func SchemaMetadata() *SchemaMetadataApplyConfiguration {
	return &SchemaMetadataApplyConfiguration{}
}

// WithTags puts the entries into the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Tags field,
// overwriting an existing map entries in Tags field with the same key.
func (b *SchemaMetadataApplyConfiguration) WithTags(entries map[string][]string) *SchemaMetadataApplyConfiguration {
	if b.Tags == nil && len(entries) > 0 {
		b.Tags = make(map[string][]string, len(entries))
	}
	for k, v := range entries {
		b.Tags[k] = v
	}
	return b
}

// WithProperties puts the entries into the Properties field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Properties field,
// overwriting an existing map entries in Properties field with the same key.
func (b *SchemaMetadataApplyConfiguration) WithProperties(entries map[string]string) *SchemaMetadataApplyConfiguration {
	if b.Properties == nil && len(entries) > 0 {
		b.Properties = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Properties[k] = v
	}
	return b
}

// WithSensitive adds the given value to the Sensitive field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Sensitive field.
func (b *SchemaMetadataApplyConfiguration) WithSensitive(values ...string) *SchemaMetadataApplyConfiguration {
	for i := range values {
		b.Sensitive = append(b.Sensitive, values[i])
	}
	return b
}
