// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

// SASLApplyConfiguration represents an declarative configuration of the SASL type for use
// with apply.
type SASLApplyConfiguration struct {
	Enabled       *bool                            `json:"enabled,omitempty"`
	Mechanism     *string                          `json:"mechanism,omitempty"`
	SecretRef     *string                          `json:"secretRef,omitempty"`
	Users         []UsersItemsApplyConfiguration   `json:"users,omitempty"`
	BootstrapUser *BootstrapUserApplyConfiguration `json:"bootstrapUser,omitempty"`
}

// SASLApplyConfiguration constructs an declarative configuration of the SASL type for use with
// apply.
func SASL() *SASLApplyConfiguration {
	return &SASLApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *SASLApplyConfiguration) WithEnabled(value bool) *SASLApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithMechanism sets the Mechanism field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mechanism field is set to the value of the last call.
func (b *SASLApplyConfiguration) WithMechanism(value string) *SASLApplyConfiguration {
	b.Mechanism = &value
	return b
}

// WithSecretRef sets the SecretRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecretRef field is set to the value of the last call.
func (b *SASLApplyConfiguration) WithSecretRef(value string) *SASLApplyConfiguration {
	b.SecretRef = &value
	return b
}

// WithUsers adds the given value to the Users field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Users field.
func (b *SASLApplyConfiguration) WithUsers(values ...*UsersItemsApplyConfiguration) *SASLApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithUsers")
		}
		b.Users = append(b.Users, *values[i])
	}
	return b
}

// WithBootstrapUser sets the BootstrapUser field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BootstrapUser field is set to the value of the last call.
func (b *SASLApplyConfiguration) WithBootstrapUser(value *BootstrapUserApplyConfiguration) *SASLApplyConfiguration {
	b.BootstrapUser = value
	return b
}
