// Copyright 2024 Redpanda Data, Inc.
//
// Use of this software is governed by the Business Source License
// included in the file licenses/BSL.md
//
// As of the Change Date specified in that file, in accordance with
// the Business Source License, use of this software will be governed
// by the Apache License, Version 2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha2

import (
	v1 "k8s.io/api/core/v1"
)

// RPControllersApplyConfiguration represents an declarative configuration of the RPControllers type for use
// with apply.
type RPControllersApplyConfiguration struct {
	Enabled            *bool                            `json:"enabled,omitempty"`
	Resources          *v1.ResourceRequirements         `json:"resources,omitempty"`
	SecurityContext    *v1.SecurityContext              `json:"securityContext,omitempty"`
	Image              *RedpandaImageApplyConfiguration `json:"image,omitempty"`
	HealthProbeAddress *string                          `json:"healthProbeAddress,omitempty"`
	MetricsAddress     *string                          `json:"metricsAddress,omitempty"`
	Run                []string                         `json:"run,omitempty"`
	CreateRBAC         *bool                            `json:"createRBAC,omitempty"`
}

// RPControllersApplyConfiguration constructs an declarative configuration of the RPControllers type for use with
// apply.
func RPControllers() *RPControllersApplyConfiguration {
	return &RPControllersApplyConfiguration{}
}

// WithEnabled sets the Enabled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Enabled field is set to the value of the last call.
func (b *RPControllersApplyConfiguration) WithEnabled(value bool) *RPControllersApplyConfiguration {
	b.Enabled = &value
	return b
}

// WithResources sets the Resources field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resources field is set to the value of the last call.
func (b *RPControllersApplyConfiguration) WithResources(value v1.ResourceRequirements) *RPControllersApplyConfiguration {
	b.Resources = &value
	return b
}

// WithSecurityContext sets the SecurityContext field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SecurityContext field is set to the value of the last call.
func (b *RPControllersApplyConfiguration) WithSecurityContext(value v1.SecurityContext) *RPControllersApplyConfiguration {
	b.SecurityContext = &value
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *RPControllersApplyConfiguration) WithImage(value *RedpandaImageApplyConfiguration) *RPControllersApplyConfiguration {
	b.Image = value
	return b
}

// WithHealthProbeAddress sets the HealthProbeAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the HealthProbeAddress field is set to the value of the last call.
func (b *RPControllersApplyConfiguration) WithHealthProbeAddress(value string) *RPControllersApplyConfiguration {
	b.HealthProbeAddress = &value
	return b
}

// WithMetricsAddress sets the MetricsAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MetricsAddress field is set to the value of the last call.
func (b *RPControllersApplyConfiguration) WithMetricsAddress(value string) *RPControllersApplyConfiguration {
	b.MetricsAddress = &value
	return b
}

// WithRun adds the given value to the Run field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Run field.
func (b *RPControllersApplyConfiguration) WithRun(values ...string) *RPControllersApplyConfiguration {
	for i := range values {
		b.Run = append(b.Run, values[i])
	}
	return b
}

// WithCreateRBAC sets the CreateRBAC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CreateRBAC field is set to the value of the last call.
func (b *RPControllersApplyConfiguration) WithCreateRBAC(value bool) *RPControllersApplyConfiguration {
	b.CreateRBAC = &value
	return b
}
